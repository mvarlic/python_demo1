name: CI/CD Pipeline - Deploy Flask App to EC2

on:
  push:
    branches:
      - main  # Cambia a la rama que quieras monitorizar

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Clonar el repositorio
    - name: Clonar el repositorio
      uses: actions/checkout@v2 

    # Paso 3: Conectar a la instancia EC2 y desplegar Flask
    - name: Conectar a la instancia EC2 y desplegar Flask
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}  # Añade la IP pública de tu instancia EC2 a GitHub Secrets
        port: 22
        username: ec2-user  # Usuario por defecto en Amazon Linux (modifica si es otro usuario)
        key: ${{ secrets.EC2_SSH_KEY }}  # Llave SSH privada que usas para conectarte a EC2, añádela a GitHub Secrets
        script: |
          # Directorio donde se clona la aplicación
          APP_DIR="/home/ec2-user/app"
          LOG_DIR="/home/ec2-user/log"
          REPO_URL="https://github.com/${{github.repository}}.git"
          VENV_DIR="$APP_DIR/venv"  # Directorio del entorno virtual
          LOG_FILE="$LOG_DIR/deploy.log" 

          # Redirige toda la salida a un archivo de log
          exec > >(tee -a $LOG_FILE) 2>&1
          
          echo "Si el directorio no existe, clona el repositorio por primera vez"
          if [ ! -d "$APP_DIR" ]; then
            echo "Repositorio no encontrado. Clonando por primera vez '$REPO_URL' en '$APP_DIR'"
            git clone -b main $REPO_URL $APP_DIR
            cd $APP_DIR
          else
            echo "Repositorio encontrado. Actualizando..."
            cd $APP_DIR
            git pull origin main
          fi

          # Crear un entorno virtual si no existe
          if [ ! -d "$VENV_DIR" ]; then
            echo "Creando entorno virtual en '$VENV_DIR'"
            python3 -m venv $VENV_DIR
          fi

          echo "Activar el entorno virtual"
          source $VENV_DIR/bin/activate

          echo "Instalar dependencias de Flask y Python si el requirements.txt ha cambiado"
          pip3 install flask flask-wtf python-dotenv llama_index llama-index-embeddings-huggingface llama-index-vector-stores-supabase
          
          echo "Detener cualquier instancia anterior de Flask"
          pkill -f 'flask run' || true  # Ignorar errores si no está corriendo
          
          echo "Exportar variables de entorno (si son necesarias)"
          export FLASK_APP=app.py
          
          echo "Iniciar Flask en segundo plano y en el puerto 80"
          sudo nohup flask run --host=0.0.0.0 --port=80 > $LOG_DIR/flask.log 2>&1 &
